#! /usr/bin/env python3
# ---------------------------------------------------------------------
# Soft-dev Bibtex Preprocessor
# ---------------------------------------------------------------------
# Note this requires Python 3 and the bibtexparser module.
#
# Copyright (c) 2013-2016 King's College London
#
# Authored by Edd Barrett <vext01@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import getopt, os, sys, re, io
sys.path.append(os.path.join(os.path.split(os.path.abspath(sys.argv[0]))[0], "..", "lib", "python"))

from bparser import BibTexParser

ALWAYS_EXCLUDE = ["isbn", "issn", "abstract", "location", "address", "organization"]

# Stuff that we don't want to see in the bibtex file (per-class)
# In the future we may allow the user to adjust this by command line
# flags. But let's cross that bridge when we encounter it.
EXCLUDE_MAP = {
    "book"          : ALWAYS_EXCLUDE,
    "article"       : ALWAYS_EXCLUDE + ["publisher"],
    "techreport"    : ALWAYS_EXCLUDE + ["publisher"],
    "mastersthesis" : ALWAYS_EXCLUDE + ["publisher"],
    "phdthesis"     : ALWAYS_EXCLUDE + ["publisher"],
    "inproceedings" : ALWAYS_EXCLUDE + ["series", "publisher"],
    "incollection"  : ALWAYS_EXCLUDE + ["series", "publisher"],
    "misc"          : ALWAYS_EXCLUDE,
    "manual"        : ALWAYS_EXCLUDE,
}

# Warn if fields match a regex
REGEX_WARNINGS = {
    "booktitle" : [
        # The idiom "Proceedings of ..." etc. waste precious space.
        # Authors should just list the title of the conference/workshop.
        ".*[Pp]roc\.", ".*[Pp]roceedings", ".*[Ww]orkshop"
    ],
    "author" : [".*[Ee]dward [Bb]arrett"], # Prefer "Edd"
    "id": [r"^\w+\d\d\d\d"], # Years in keys should be in two-digit format.
}

ALWAYS_WARN_IF_MISSING = [ "year", "author", "title" ]

WARN_IF_MISSING_MAP = {
        "inproceedings" : ALWAYS_WARN_IF_MISSING + ["month"],
        "proceedings"   : ALWAYS_WARN_IF_MISSING + ["month"],
        "article"       : ALWAYS_WARN_IF_MISSING + ["month"],
        "phdthesis"     : ALWAYS_WARN_IF_MISSING + ["month"],
        "incollection"  : ALWAYS_WARN_IF_MISSING + ["month"],
        "techreport"    : ALWAYS_WARN_IF_MISSING + ["month"],
        "mastersthesis" : ALWAYS_WARN_IF_MISSING + ["month"],
        "book"          : ALWAYS_WARN_IF_MISSING,
        "misc"          : ALWAYS_WARN_IF_MISSING,
        # For manual, you may have an organisation instead of an author
        "manual"        : list(filter(lambda x: x != "author",
                                      ALWAYS_WARN_IF_MISSING)),
        }

BAD_MONTH_QUOTE_REGEX = re.compile(r'\s*month\s*=\s*([{"].*["}]).*$')

# Acceptable month strings. Not empty value included for special circumstances.
OK_MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
             "Sep", "Oct", "Nov", "Dec", ""]


class PreBib:
    def __init__(self, extra_excludes):
        self.extra_excludes = extra_excludes
        self.exit_code = 0  # flipped to 1 if a warning is raised

    def process(self, infile):
        """ Process a file by name """

        with open(infile, 'r') as fh:
            b = BibTexParser(fh)

        entries = b.get_entry_list()
        new_entries = [ self.process_entry(x) for x in entries ]

        # chuck to stdout
        entries_strs = [ self.format_entry(e) for e in new_entries ]
        print("This file automatically created by prebib -- do not edit this file.\nChanges to this file are likely to be overwritten without warning.\n\n")
        print("\n".join(entries_strs))

        with open(infile, 'r') as fh:
            self.check_quoting(fh)

        return self.exit_code

    def check_quoting(self, fh):
        for line in fh:
            match = re.match(BAD_MONTH_QUOTE_REGEX, line)
            if match:
                # An empty month is allowed in special circumstances, which
                # does require using quoting.
                if match.group(1) != "{}":
                    self.msg("Bad month quoting: '%s'" % line.strip())

    def msg(self, msg, fatal=False):
        """ Display a warning or error """

        if not fatal:
            self.exit_code = 1
            sys.stderr.write("***warn: %s\n" % msg)
            sys.stderr.flush()
        else:
            sys.stderr.write("***error: %s\n" % msg)
            sys.stderr.flush()
            sys.exit(1)

    def process_entry(self, entry):
        bclass = entry["type"]
        key = entry["id"]

        excludes = self.extra_excludes.copy()
        try:
            excludes = self.extra_excludes + EXCLUDE_MAP[bclass]
        except KeyError:
            self.msg("undefined EXCLUDE_MAP enrty for bibtex class '%s'" % (bclass))
            excludes = self.extra_excludes.copy()

        # filter out junk we don't want
        filtered_data = { k : v for (k, v) in entry.items() if k not in excludes }
        self.regex_warn(key, filtered_data)
        self.missing_warn(bclass, key, filtered_data)

        if "month" in entry and entry["month"] not in OK_MONTHS:
                self.msg("Unknown month string: '%s'" % entry["month"])

        return filtered_data

    def regex_warn(self, key, data):
        """ Warn about common errors that can be detected by regex """

        for (f, v) in data.items():
            if f == "author": # library splits authors
                v = u"and".join([ u" ".join(x) for x in v])
            if f not in REGEX_WARNINGS:
                continue
            for r in REGEX_WARNINGS[f]:
                if re.match(r, v):
                    self.msg("Entry '%s': '%s={%s}'\n  fires a naughty regex '%s'" % \
                        (key, f, v, r))

    def missing_warn(self, bclass, key, data):
        try:
            warn_missing_entry = WARN_IF_MISSING_MAP[bclass]
        except KeyError:
            self.msg("Bibtex class '%s' is missing a WARN_IF_MISSING" % bclass)
            warn_missing_entry = []

        warn_missing = [ k for
                        k in warn_missing_entry if k not in data.keys()
                        and k not in self.extra_excludes]
        for i in warn_missing:
            self.msg("Entry '%s' is missing a '%s' field" % (key, i))

    def format_entry(self, data):
        """ Throws out a nicely formatted bibtex entry """

        bclass = data.pop("type")
        key = data.pop("id")
        s = "@%s{%s,\n" % (bclass, key)
        for (k, v) in data.items():
            if k == "month" and v != "":
                s += "    %s = %s,\n" % (k, v)
            else:
                s += "    %s = {%s},\n" % (k, v)
        return s + "}\n"

def usage():
    sys.stderr.write("usage: prebib [-x <exclude field>] <infile.bib>\n")
    sys.exit(1)

if __name__ == "__main__":
    opts, args = getopt.getopt(sys.argv[1 : ], "hx:")
    if len(args) != 1: usage()
    extra_excludes = []
    for k, v in opts:
        if k == "-x":
            extra_excludes.append(v)
        else:
            usage()
    pb = PreBib(extra_excludes)
    sys.exit(pb.process(args[0]))

